@page "/login"

@layout MealOrdering.Client.Shared.EmptyLayout

<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-4 col-xl-3">

            <EditForm Model="@userLoginRequest" OnValidSubmit="loginProcess">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <input @bind-value="userLoginRequest.Email" class="form-control form-control-lg" type="text" placeholder="E-Mail Address" />
                </div>

                <div class="form-group">
                    <input @bind-value="userLoginRequest.Password" class="form-control form-control-lg" type="password" placeholder="Password" />
                </div>

                <div class="form-group">
                    <button class="btn btn-info btn-block">Login</button>
                </div>

            </EditForm>

        </div>

    </div>
</div>


@code {

    private UserLoginRequestDTO userLoginRequest = new();

    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }


    private async Task loginProcess()
    {
        var httpRequestResponse = await Client.PostAsJsonAsync("api/User/Login", userLoginRequest);
        try
        {


            if (httpRequestResponse.IsSuccessStatusCode)
            {
                var response = await httpRequestResponse.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

                if (response.Success)
                {
                    await localStorageService.SetItemAsync("token", response.Value.ApiToken);
                    await localStorageService.SetItemAsync("email", response.Value.User.EMailAddress);

                    //Bu bilgileri local storagede tuttuk ve authstateprovider sınıfında bunları okuyacağız 

                    (authenticationStateProvider as AuthStateProvider).NotifyUserLogin(response.Value.User.EMailAddress);

                    Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
                                                                                    ("Bearer", response.Value.ApiToken);

                    NavigationManager.NavigateTo("/");
                }

                else await ModalManager.ShowMessageAsync("Login Error", response.Message);
            }
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Login Error", ex.Message);
        }
    }

}
