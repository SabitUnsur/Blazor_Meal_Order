@page "/login"
<<<<<<< HEAD
@layout MealOrdering.Client.Shared.EmptyLayout




=======

@layout MealOrdering.Client.Shared.EmptyLayout

>>>>>>> 9e6b9473dcf2cd01f3c11c3d90412de78c5a2a62
<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">

        <div class="col col-sm-6 col-md-6 col-lg-4 col-xl-3">

            <EditForm Model="@userLoginRequest" OnValidSubmit="loginProcess">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <input @bind-value="userLoginRequest.Email" class="form-control form-control-lg" type="text" placeholder="E-Mail Address" />
                </div>

                <div class="form-group">
                    <input @bind-value="userLoginRequest.Password" class="form-control form-control-lg" type="password" placeholder="Password" />
                </div>

                <div class="form-group">
                    <button class="btn btn-info btn-block">Login</button>
                </div>

            </EditForm>

        </div>

    </div>
</div>


<<<<<<< HEAD



@code {

=======
@code {

    private UserLoginRequestDTO userLoginRequest = new();

>>>>>>> 9e6b9473dcf2cd01f3c11c3d90412de78c5a2a62
    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
<<<<<<< HEAD
    NavigationManager NavManeger { get; set; }
=======
    NavigationManager NavigationManager { get; set; }
>>>>>>> 9e6b9473dcf2cd01f3c11c3d90412de78c5a2a62

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
<<<<<<< HEAD
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();
=======
    AuthenticationStateProvider authenticationStateProvider { get; set; }
>>>>>>> 9e6b9473dcf2cd01f3c11c3d90412de78c5a2a62


    private async Task loginProcess()
    {
<<<<<<< HEAD
        var httpReqRes = await Client.PostAsJsonAsync("api/User/Login", userLoginRequest);

        if (httpReqRes.IsSuccessStatusCode)
        {
            try
            {
                var res = await httpReqRes.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

                if (res.Success)
                {

                    await localStorageService.SetItemAsync("token", res.Value.ApiToken);
                    await localStorageService.SetItemAsync("email", res.Value.User.EMailAddress);
                    await localStorageService.SetItemAsync("UserId", res.Value.User.Id.ToString());
                    await localStorageService.SetItemAsync("UserFullName", res.Value.User.FullName);

                    //Bu bilgileri local storagede tuttuk ve authstateprovider sınıfında bunları okuyacağız

                    (AuthenticationStateProvider as AuthStateProvider).NotifyUserLogin(res.Value.User.EMailAddress);

                    Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", res.Value.ApiToken);

                    NavManeger.NavigateTo("/");
                }
                else
                {
                    await ModalManager.ShowMessageAsync("Login Error", res.Message);
                }
            }
            catch (Exception ex)
            {
                await ModalManager.ShowMessageAsync("Login Error", ex.Message);
            }
        }

=======
        var httpRequestResponse = await Client.PostAsJsonAsync("api/User/Login", userLoginRequest);
        try
        {

            if (httpRequestResponse.IsSuccessStatusCode)
            {
                var response = await httpRequestResponse.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

                if (response.Success)
                {
                    await localStorageService.SetItemAsync("token", response.Value.ApiToken);
                    await localStorageService.SetItemAsync("email", response.Value.User.EMailAddress);

                    //Bu bilgileri local storagede tuttuk ve authstateprovider sınıfında bunları okuyacağız 

                    (authenticationStateProvider as AuthStateProvider).NotifyUserLogin(response.Value.User.EMailAddress);

                    Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue
                                                                                    ("Bearer", response.Value.ApiToken);

                    NavigationManager.NavigateTo("/");
                }

                else await ModalManager.ShowMessageAsync("Login Error", response.Message);
            }
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Login Error", ex.Message);
        }
>>>>>>> 9e6b9473dcf2cd01f3c11c3d90412de78c5a2a62
    }

}
